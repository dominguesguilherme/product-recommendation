# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
# parameters:
#     default_parameter:
#         - DefaultParameter\Parameter\Exception\Infrastructure\Handler\NotFoundHttpErrorHandle

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    ProductRecommendation\Core\:
        resource: '../src/Core/*'
        exclude: '../src/Core/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    ProductRecommendation\Framework\Serializer\:
        resource: '../src/Framework/Serializer/*'
    
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    ProductRecommendation\Core\Infrastructure\Delivery\:
        resource: '../src/Core/Infrastructure/Delivery'
        tags: ['controller.service_arguments']

    ProductRecommendation\Framework\Serializer\CreateOrderDenormalizer:
        tags: ['serializer.normalizer']

    Symfony\Component\Serializer\Serializer:
        arguments:
            $normalizers:
                - '@serializer.normalizer.object'
                - '@ProductRecommendation\Framework\Serializer\CreateOrderDenormalizer'  # Added the custom denormalizer
            $encoders:
                - '@serializer.encoder.json'
                - '@serializer.encoder.xml'

    Symfony\Component\Serializer\Normalizer\ObjectNormalizer:
        arguments:
            $classMetadataFactory: '@serializer.mapping.class_metadata_factory'
            $nameConverter: null
            $propertyAccessor: '@property_accessor'
            $propertyTypeExtractor: '@property_info'

    Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory:
        arguments:
            $loader: '@serializer.mapping.cache_loader'

    Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader:
        arguments:
            $reader: '@annotation_reader'